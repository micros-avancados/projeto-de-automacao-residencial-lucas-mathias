//Programa: Projeto 1 - Sistemas Microprocessados Avançados
//Autores: Lucas Eduardo Pandolfo // Mathias "Cavani" Trevisan
 
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>
#include <IRutils.h>
#include "raw_codes.h"        

#define TOPICO_SUBSCRIBE "MQTTLucasMathiasEnvia"     //tópico MQTT de escuta
#define TOPICO_PUBLISH   "MQTTLucasMathiasRecebe"    //tópico MQTT de envio de informações para Broker
#define ID_MQTT  "CabeludoSmartHome"     //id mqtt (para identificação de sessão)

IRsend irsend(D6);            // Cria instancia da biblioteca IR

// Variáveis Utilizadas pelo A/c
bool state = 0;   // Estado Atual do A/C
bool l_state = 0; // Ultimo estado do A/C

//Pinagem
#define D0    16
#define D1    5
#define D2    4
#define D3    0
#define D4    2
#define D5    14
#define D6    12
#define D7    13
#define D8    15
#define D9    3
#define D10   1

const int LM35 = A0;
float temperatura; // Variável que armazenará a temperatura medida
const char* SSID = "WIFIDECUEHROLA"; // SSID / nome da rede WI-FI que deseja se conectar
const char* PASSWORD = "bicicletachinelo"; // Senha da rede WI-FI que deseja se conectar
  
const char* BROKER_MQTT = "iot.eclipse.org"; //URL do broker MQTT que se deseja utilizar
int BROKER_PORT = 1883; // Porta do Broker MQTT

WiFiClient espClient; // Cria o objeto espClient
PubSubClient MQTT(espClient); // Instancia o Cliente MQTT passando o objeto espClient
char EstadoSaida = '0';  //variável que armazena o estado atual da saída

void initSerial();
void initWiFi();
void initMQTT();
void reconectWiFi();
void mqtt_callback(char* topic, byte* payload, unsigned int length);
void VerificaConexoesWiFIEMQTT(void);
void InitOutput(void);
 

void leitura_da_temp() {
  temperatura = (float(analogRead(LM35))*2.5/(1023.0))/0.01;
  Serial.print("Temperatura: ");
  Serial.println(temperatura);
  char ret[100];
}

void setup() 
{
    InitOutput();
    initSerial();
    initWiFi();
    initMQTT();
    irsend.begin();
}

void initSerial() 
{
    Serial.begin(115200);
}

void initWiFi() 
{
    delay(10);
    Serial.println("------Conexao WI-FI------");
    Serial.print("Conectando-se na rede: ");
    Serial.println(SSID);
    Serial.println("Aguarde");
     
    reconectWiFi();
}

void initMQTT() 
{
    MQTT.setServer(BROKER_MQTT, BROKER_PORT);   //informa qual broker e porta deve ser conectado
    MQTT.setCallback(mqtt_callback);            //atribui função de callback (função chamada quando qualquer informação de um dos tópicos subescritos chega)
}

void mqtt_callback(char* topic, byte* payload, unsigned int length) 
{
    String msg;
 
    for(int i = 0; i < length; i++) 
    {
       char c = (char)payload[i];
       msg += c;
    }
   
    if (msg.equals("L"))
    {
        digitalWrite(D0, LOW);
        EstadoSaida = '1';
    }
 
    //verifica se deve colocar nivel alto de tensão na saída D0:
    if (msg.equals("D"))
    {
        digitalWrite(D0, HIGH);
        EstadoSaida = '0';
    }
     
}

void reconnectMQTT() 
{
    while (!MQTT.connected()) 
    {
        Serial.print("* Tentando se conectar ao Broker MQTT: ");
        Serial.println(BROKER_MQTT);
        if (MQTT.connect(ID_MQTT)) 
        {
            Serial.println("Conectado com sucesso ao broker MQTT!");
            MQTT.subscribe(TOPICO_SUBSCRIBE); 
        } 
        else
        {
            Serial.println("Falha ao reconectar no broker.");
            Serial.println("Havera nova tentatica de conexao em 2s");
            delay(2000);
        }
    }
}

void reconectWiFi() 
{
    //se já está conectado a rede WI-FI, nada é feito. 
    //Caso contrário, são efetuadas tentativas de conexão
    if (WiFi.status() == WL_CONNECTED)
        return;
         
    WiFi.begin(SSID, PASSWORD); // Conecta na rede WI-FI
     
    while (WiFi.status() != WL_CONNECTED) 
    {
        delay(100);
        Serial.print(".");
    }
   
    Serial.println();
    Serial.print("Conectado com sucesso na rede ");
    Serial.print(SSID);
    Serial.println("IP obtido: ");
    Serial.println(WiFi.localIP());
}
 

void VerificaConexoesWiFIEMQTT(void)
{
    if (!MQTT.connected()) 
        reconnectMQTT(); //se não há conexão com o Broker, a conexão é refeita
     
     reconectWiFi(); //se não há conexão com o WiFI, a conexão é refeita
}

void EnviaEstadoOutputMQTT(void)
{
    if (EstadoSaida == '0')
      MQTT.publish(TOPICO_PUBLISH, "D");
 
    if (EstadoSaida == '1')
      MQTT.publish(TOPICO_PUBLISH, "L");
 
    Serial.println("- Estado da saida D0 enviado ao broker!");
    delay(1000);
}

void InitOutput(void)
{

    pinMode(D0, OUTPUT);
    digitalWrite(D0, HIGH);          
}


void liga_ac() 
{                      
  if (state) 
  {
    irsend.sendRaw(liga, 199, 38);
  }
  else 
  {
    irsend.sendRaw(desliga, 199, 38);
  }
}
 
//programa principal
void loop() 
{  
    //garante funcionamento das conexões WiFi e ao broker MQTT
    VerificaConexoesWiFIEMQTT();
 
    //envia o status de todos os outputs para o Broker no protocolo esperado
    EnviaEstadoOutputMQTT();
 
    //keep-alive da comunicação com broker MQTT
    MQTT.loop();

    l_state = state; // iguala os valores


  if (state != l_state) 
  {   // Atualiza o estado
    liga_ac();
  }
}
