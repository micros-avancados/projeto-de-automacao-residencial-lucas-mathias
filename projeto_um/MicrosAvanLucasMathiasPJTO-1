//Programa: Projeto 1 - Sistemas Microprocessados Avançados
//Autores: Lucas Eduardo Pandolfo // Mathias "Cavani" Trevisan
//Dispositivo Sensor Temperatura

/////////////////----------------------------------------------------------------------------------------------///////////////////////

#include <FS.h>                                         
#include <ESP8266WiFi.h>                                                        //https://github.com/esp8266/Arduino
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <WiFiManager.h>                                                        //https://github.com/tzapu/WiFiManager
#include <ArduinoJson.h>                                                        //https://github.com/bblanchon/ArduinoJson
#include <PubSubClient.h>
#include <EEPROM.h>

#define DEBUG                                                                   //Habilita acompanhar pela porta serial

//------------------------------------------------ MQTT ------------------------------------------------------------------------------

#define servidor_mqtt             "m11.cloudmqtt.com"                           //URL do servidor MQTT
#define servidor_mqtt_porta       "19216"                                       //Porta do servidor
#define servidor_mqtt_usuario     "offgsdps"                                    //Usuário
#define servidor_mqtt_senha       "DSRUtSIwUl6e"                                //Senha
//                                VVVVVVVVVVVV                                  transformar em variaveis?!?!
#define mqtt_topico_pub           "Publisher_MQTTLucMath"                       //Tópico do MQTT
#define mqtt_topico_sub           "Subscriber_MQTTLucMath"                      //Tópico do MQTT

//------------------------------------------------ DECLARAÇÕES -----------------------------------------------------------------------

//Declaração do pino que será utilizado
#define LM35                      A0                                            //Pino do sensor de temp  AD0
#define LEDIR                     16                                            //Pino do Emissor IR      D5
#define memoria_alocada           4                                             //Define o quanto sera alocado na EEPROM (valores entre 4 e 4096 bytes)
#define botao                     14                                            //Botão para alternar para modo de configuração

int ValorEntrada;
float Temperatura;                                                               //Varaiavel para armazenar a temperatura

bool statusAnt      =             0;                                            //Variável que armazenará o status anterior do pino
bool precisaSalvar  =             false;                                        //Flag para salvar os dados

WiFiClient espClient;                                                           //Instância do WiFiClient
PubSubClient client(espClient);                                                 //Passando a instância do WiFiClient para a instância do PubSubClient

//------------------------------------------------ SETUP -----------------------------------------------------------------------------


void setup() 
{
  #ifdef DEBUG
    Serial.begin(115200);
  #endif
  imprimirSerial(true, "...");

//Iniciando o SPIFSS (SPI Flash File System)
  imprimirSerial(true, "Iniciando o SPIFSS (SPI Flash File System)");
  if (SPIFFS.begin()) 
  {
    imprimirSerial(true, "Sistema de arquivos SPIFSS montado!");
    if (SPIFFS.exists("/config.json")) 
    {
      //Arquivo de configuração existe e será lido.
      imprimirSerial(true, "Abrindo o arquivo de configuracao...");
      File configFile = SPIFFS.open("/config.json", "r");
      if (configFile) 
      {
        imprimirSerial(true, "Arquivo de configuracao aberto.");
        size_t size = configFile.size();
        
        //Alocando um buffer para armazenar o conteúdo do arquivo.
        std::unique_ptr<char[]> buf(new char[size]);

        configFile.readBytes(buf.get(), size);
        DynamicJsonBuffer jsonBuffer;
        JsonObject& json = jsonBuffer.parseObject(buf.get());
        json.printTo(Serial);
        if (json.success()) 
        {
            //Copiando as variáveis salvas previamente no aquivo json para a memória do ESP.
            imprimirSerial(true, "arquivo json analisado.");
            strcpy(servidor_mqtt, json["servidor_mqtt"]);
            strcpy(servidor_mqtt_porta, json["servidor_mqtt_porta"]);
            strcpy(servidor_mqtt_usuario, json["servidor_mqtt_usuario"]);
            strcpy(servidor_mqtt_senha, json["servidor_mqtt_senha"]);
            strcpy(mqtt_topico_pub, json["mqtt_topico_pub"]);
            strcpy(mqtt_topico_sub, json["mqtt_topico_sub"]);
        }
        else 
        {
          imprimirSerial(true, "Falha ao ler as configuracoes do arquivo json.");
        }
      }
    }
  } 
  else 
  {
    imprimirSerial(true, "Falha ao montar o sistema de arquivos SPIFSS.");
  }
  //Fim da leitura do sistema de arquivos SPIFSS

  //Parâmetros extras para configuração
  //Depois de conectar, parameter.getValue() vai pegar o valor configurado.
  //Os campos do WiFiManagerParameter são: id do parâmetro, nome, valor padrão, comprimento
  WiFiManagerParameter custom_mqtt_server("server", "Servidor MQTT", servidor_mqtt, 40);
  WiFiManagerParameter custom_mqtt_port("port", "Porta", servidor_mqtt_porta, 6);
  WiFiManagerParameter custom_mqtt_user("user", "Usuario", servidor_mqtt_usuario, 20);
  WiFiManagerParameter custom_mqtt_pass("pass", "Senha", servidor_mqtt_senha, 20);
  WiFiManagerParameter custom_mqtt_topic_pub("topic_pub", "Topico para publicar", mqtt_topico_pub, 30);
  WiFiManagerParameter custom_mqtt_topic_sub("topic_sub", "Topico para subscrever", mqtt_topico_sub, 30);


  //Inicialização do WiFiManager. Uma vez iniciado não é necessário mantê-lo em memória.
  WiFiManager wifiManager;

  //Definindo a função que informará a necessidade de salvar as configurações
  wifiManager.setSaveConfigCallback(precisaSalvarCallback);
  
  //Adicionando os parâmetros para conectar ao servidor MQTT
  wifiManager.addParameter(&custom_mqtt_server);
  wifiManager.addParameter(&custom_mqtt_port);
  wifiManager.addParameter(&custom_mqtt_user);
  wifiManager.addParameter(&custom_mqtt_pass);
  wifiManager.addParameter(&custom_mqtt_topic_pub);
  wifiManager.addParameter(&custom_mqtt_topic_sub);

  //Busca o ID e senha da rede wifi e tenta conectar.
  //Caso não consiga conectar ou não exista ID e senha,
  //cria um access point com o nome "WIFIdoBaralho" e a senha "jacagay123"
  //E entra em loop aguardando a configuração de uma rede WiFi válida.
  if (!wifiManager.autoConnect("WIFIdoBaralho", "jacagay123")) 
  {
    imprimirSerial(true, "Falha ao conectar. Excedeu o tempo limite para conexao.");
    delay(3000);
    //Reinicia o ESP e tenta novamente ou entra em sono profundo (DeepSleep)
    ESP.reset();
    delay(5000);
  }

  //Se chegou até aqui é porque conectou na WiFi!
  imprimirSerial(true, "Conectado!! :)");

  //Lendo os parâmetros atualizados
  strcpy(servidor_mqtt, custom_mqtt_server.getValue());
  strcpy(servidor_mqtt_porta, custom_mqtt_port.getValue());
  strcpy(servidor_mqtt_usuario, custom_mqtt_user.getValue());
  strcpy(servidor_mqtt_senha, custom_mqtt_pass.getValue());
  strcpy(mqtt_topico_pub, custom_mqtt_topic_pub.getValue());
  strcpy(mqtt_topico_sub, custom_mqtt_topic_sub.getValue());

  //Salvando os parâmetros informados na tela web do WiFiManager
  if (precisaSalvar) 
  {
    imprimirSerial(true, "Salvando as configuracoes");
    DynamicJsonBuffer jsonBuffer;
    JsonObject& json = jsonBuffer.createObject();
    json["servidor_mqtt"] = servidor_mqtt;
    json["servidor_mqtt_porta"] = servidor_mqtt_porta;
    json["servidor_mqtt_usuario"] = servidor_mqtt_usuario;
    json["servidor_mqtt_senha"] = servidor_mqtt_senha;
    json["mqtt_topico_pub"] = mqtt_topico_pub;
    json["mqtt_topico_sub"] = mqtt_topico_sub;

    File configFile = SPIFFS.open("/config.json", "w");
    if (!configFile) 
    {
      imprimirSerial(true, "Houve uma falha ao abrir o arquivo de configuracao para incluir/alterar as configuracoes.");
    }

    json.printTo(Serial);
    json.printTo(configFile);
    configFile.close();
  }

  imprimirSerial(false, "IP: ");
  imprimirSerial(true, WiFi.localIP().toString());

  //Informando ao client do PubSub a url do servidor e a porta.
  int portaInt = atoi(servidor_mqtt_porta);
  client.setServer(servidor_mqtt, portaInt);
}

//------------------------------------------------ LOOPING ---------------------------------------------------------------------------

void loop()
{



}


//------------------------------------------------ FUNÇÕES ---------------------------------------------------------------------------

//Função para imprimir na porta serial
void imprimirSerial(bool linha, String mensagem)
{
  #ifdef DEBUG
    if(linha)
    {
      Serial.println(mensagem);
    }
    else
    {
      Serial.print(mensagem);
    }
  #endif
}

//Função de retorno para notificar sobre a necessidade de salvar as configurações
void precisaSalvarCallback() 
{
  imprimirSerial(true, "As configuracoes tem que ser salvas.");
  precisaSalvar = true;
}


void reconectar() 
{
  //Repete até conectar
  while (!client.connected()) 
  {
    imprimirSerial(false, "Tentando conectar ao servidor MQTT...");
    
    //Tentativa de conectar. Se o MQTT precisa de autenticação, será chamada a função com autenticação, caso contrário, chama a sem autenticação. 
    bool conectado = strlen(servidor_mqtt_usuario) > 0 ?
                     client.connect("ESP8266Client", servidor_mqtt_usuario, servidor_mqtt_senha) :
                     client.connect("ESP8266Client");

    if(conectado) 
    {
      imprimirSerial(true, "Conectado!");
      //Subscreve para monitorar os comandos recebidos
      client.subscribe(mqtt_topico_sub, 1); //QoS 1
    }
    else 
    {
      imprimirSerial(false, "Falhou ao tentar conectar. Codigo: ");
      imprimirSerial(false, String(client.state()).c_str());
      imprimirSerial(true, " tentando novamente em 5 segundos");
      //Aguarda 5 segundos para tentar novamente
      delay(5000);
    }
  }
}


void desconectar()
{
  imprimirSerial(true, "Fechando a conexao com o servidor MQTT...");
  client.disconnect();
}

//Função que envia os dados de temperatura.
void publicaComando() 
{
  if (!client.connected()) 
  {
    imprimirSerial(true, "MQTT desconectado! Tentando reconectar...");
    reconectar();
  }
  
  client.loop();
  float Temperatura = (float(analogRead(LM35))*3.3/(1023))/0.0066;
 
  char buf[10];
  sprintf(buf, "%f", Temperatura);
 
  //Publicando no MQTT
  imprimirSerial(true, "Fazendo a publicacao...");
  client.publish(mqtt_topico_pub, buf);
}

//Função que grava status do pino na EEPROM
void gravarStatusPino(uint8_t statusPino)
{
  EEPROM.begin(memoria_alocada);
  EEPROM.write(0, statusPino);
  EEPROM.end();
}

//Função que envia os dados de temperatura.

 void recebeComando()
{
  char buf[10];
  float temperatura_lida;
  sscanf(buf, "%f", &temperatura_lida);



  if(temperatura_lida > 25)
  {
    imprimirSerial(true, "Ligando o AC...");
    digitalWrite(LEDIR, HIGH);// converter para emissor ir
    gravarStatusPino(HIGH);
  }
  else (temperatura_lida <= 25);
  {
    imprimirSerial(true, "Desligando o AC...");
    digitalWrite(LEDIR, LOW);// converter para emissor ir
    gravarStatusPino(LOW);
  }
  
  imprimirSerial(false, "Status do pino depois de processar o comando: ");
  imprimirSerial(true, String(digitalRead(LEDIR)).c_str());


}

  
